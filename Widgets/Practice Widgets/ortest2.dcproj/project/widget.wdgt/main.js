/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

var dragitem = undefined;
var tVal,lVal, rVal;

tVal = 2;
lVal = 0;
rVal = 0;
var selector; 
//selector = document.getElementById('popup').object.getValue(); 
    
    function logicselect(evt){
         evt.preventDefault();
         evt.stopPropagation();
        selector = document.getElementById('popup').object.getValue();
        
        if(selector == 1){
        
            tVal = lVal + rVal;
            var indicatorToChange = document.getElementById("answer");
            var newIndicatorValue = 2 - tVal;
            indicatorToChange.object.setValue(newIndicatorValue); 
            
            css('#ptext','display','none');
            css('#qtext','display','none');
        
        }else if(selector == 2){
            if(lVal == 1 && rVal == 1){
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else{
            
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 2;
                indicatorToChange.object.setValue(newIndicatorValue);
            }
            css('#ptext','display','none');
            css('#qtext','display','none');
        }else if(selector == 3){
            if(lVal == 0){
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else if(lVal == 1 && rVal == 1){
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else{
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 2;
                indicatorToChange.object.setValue(newIndicatorValue);
            }
            css('#ptext','display','block');
            css('#qtext','display','block');
        }
    
    
    }
    
    function setdragitemT(item, evt) {
        dragitem=document.getElementById('trueB');
        //alert('item: '+item);
        // item is an HTML DIV element.
        // evt is an event.
 
        // If the item should not be draggable, enable this next line.
        // evt.preventDefault();
 
        return true;
    }
        function setdragitemF(item, evt) {
        dragitem= document.getElementById('falseB');
        //alert('item: '+item);
        // item is an HTML DIV element.
        // evt is an event.
 
        // If the item should not be draggable, enable this next line.
        // evt.preventDefault();
 
        return true;
    }
    function cleardragitem() {
        dragitem=undefined;
        // alert('item: '+item);
    }
    function dodrag() {
        // alert('item: '+dragitem);
    }
 
    // This is required---used to tell WebKit that the drag should
    // be allowed.
    function handledragenter(elt, evt) {
        evt.preventDefault();
        return true;
    }
    
    function handledragover(elt, evt) {
        evt.preventDefault();
        return true;
    }
 
 
    function handledragleave(elt, evt) {
 
    }
 
    function handledropl(elt, evt) {
    
        //alert(dragitem.id);
        var newid=dragitem.id + '_destl';
        var dest = document.getElementById(newid);
        if(dragitem.id == 'trueB'){
            alert('drop Left true');
            css('#trueB_destl','display','block');
            css('#falseB_destl','display','none');
            lVal = 1;
                             
        }else if(dragitem.id == 'falseB'){
            alert('drop Left false');
            lVal = 0;
            css('#falseB_destl','display','block');
            css('#trueB_destl','display','none');
        }
        
        selector = document.getElementById('popup').object.getValue();
        
        if(selector == 1){
        
            tVal = lVal + rVal;
            var indicatorToChange = document.getElementById("answer");
            var newIndicatorValue = 2 - tVal;
            indicatorToChange.object.setValue(newIndicatorValue); 
        
        }else if(selector == 2){
        
            if(lVal == 1 && rVal == 1){
            
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else{
            
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 2;
                indicatorToChange.object.setValue(newIndicatorValue);
            }

        }else if(selector == 3){
        
            if(lVal == 0){
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else if(lVal == 1 && rVal == 1){
            
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else{
            
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 2;
                indicatorToChange.object.setValue(newIndicatorValue);
            }

        }
        
    }
    
        function handledropr(elt, evt) {
         //alert('drop Right');
        var newid=dragitem.id + '_destr';
        var dest = document.getElementById(newid);
        
        if(dragitem.id == 'trueB'){
            rVal = 1;
            css('#trueB_destr','display','block');
            css('#falseB_destr','display','none');

        }else if(dragitem.id == 'falseB'){
            rVal = 0;
            css('#falseB_destr','display','block');
            css('#trueB_destr','display','none');
      
        }
        
        selector = document.getElementById('popup').object.getValue();
        
        if(selector == 1){
        
            tVal = lVal + rVal;
            var indicatorToChange = document.getElementById("answer");
            var newIndicatorValue = 2 - tVal;
            indicatorToChange.object.setValue(newIndicatorValue); 
        
        }else if(selector == 2){
        
            if(lVal == 1 && rVal == 1){
            
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
                
            }else{
            
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 2;
                indicatorToChange.object.setValue(newIndicatorValue);
            }
        }else if(selector == 3){
            if(lVal == 0){
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else if(lVal == 1 && rVal == 1){
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 0;
                indicatorToChange.object.setValue(newIndicatorValue);
            }else{
                var indicatorToChange = document.getElementById("answer");
                var newIndicatorValue = 2;
                indicatorToChange.object.setValue(newIndicatorValue);
            }
        }
        
    }
    
    function css(selector, property, value) {
    for (var i=0; i<document.styleSheets.length;i++) {//Loop through all styles
        //Try add rule
        try { document.styleSheets[i].insertRule(selector+ ' {'+property+':'+value+'}', document.styleSheets[i].cssRules.length);
        } catch(err) {try { document.styleSheets[i].addRule(selector, property+':'+value);} catch(err) {}}//IE
    }
}
